// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  name           String
  email          String           @unique
  password       String
  role           Role             @default(USER)
  phone          String?
  organizationId Int?
  organization   Organization?    @relation(fields: [organizationId], references: [id])
  projects       ProjectUser[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  paidBillings   ProjectBilling[]
}

model Organization {
  id               Int       @id @default(autoincrement())
  name             String    @unique
  field            String
  description      String
  web              String?
  address          String?
  email            String?
  facebookAccount  String?
  instagramAccount String?
  twitterAccount   String?
  users            User[]
  projects         Project[]
  events           Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id                       Int              @id @default(autoincrement())
  name                     String           @unique
  slug                     String?          @unique
  field                    String
  description              String
  moneyEarned              Int              @default(0)
  activeSubscriptionsMoney Int              @default(0)
  startDate                DateTime?
  organizationId           Int?
  mpEnabled                Boolean?         @default(false)
  mpInstantCheckout        Boolean?         @default(false)
  mpPublicKey              String?
  mpAccessToken            String?
  mpApplicationId          String?          @unique
  organization             Organization?    @relation(fields: [organizationId], references: [id])
  users                    ProjectUser[]
  events                   Event[]
  coverPhoto               String?
  photoGallery             String[]
  video                    String?
  location                 String?
  acceptsVolunteers        Boolean?         @default(false)
  donations                Donation[]
  subscriptions            Subscription[]
  billings                 ProjectBilling[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectUser {
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  hours     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([projectId, userId])
}

model Event {
  id             Int          @id @default(autoincrement())
  name           String       @unique
  description    String
  date           DateTime?
  location       String?
  monetaryGoal   Int?
  volunteersGoal Int?
  projectId      Int
  project        Project      @relation(fields: [projectId], references: [id])
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Donor {
  id                 Int        @id @default(autoincrement())
  userId             Int?
  email              String?
  firstName          String?
  lastName           String?
  phone              String?
  identification     String?
  identificationType String?
  cardStart          String?
  paymentMethod      String?
  donations          Donation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([identification, identificationType])
}

model Donation {
  id        Int     @id @default(autoincrement())
  projectId Int
  project   Project @relation(fields: [projectId], references: [id])
  donorId   Int
  donor     Donor   @relation(fields: [donorId], references: [id])
  amount    Int
  paymentId String  @unique
  status    String

  createdAt DateTime @default(now())
}

model Subscription {
  id                Int               @id @default(autoincrement())
  projectId         Int
  project           Project           @relation(fields: [projectId], references: [id])
  amount            Int
  frequency         Int
  frequencyInterval FrequencyInterval
  payerEmail        String?
  mpSubscriptionId  String            @unique
  status            String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectBilling {
  id         Int           @id @default(autoincrement())
  projectId  Int
  project    Project       @relation(fields: [projectId], references: [id])
  amount     Int
  status     BillingStatus @default(PENDING)
  endsAt     DateTime
  paidAt     DateTime?
  paidBy     Int?
  paidByUser User?         @relation(fields: [paidBy], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BillingStatus {
  PENDING
  PAID
}

enum Role {
  SYSADMIN
  ORGADMIN
  USER
}

enum ProjectRole {
  OWNER
  MEMBER
  VOLUNTEER
}

enum FrequencyInterval {
  MONTHLY
  YEARLY
}
