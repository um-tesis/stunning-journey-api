# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  """
  JWT access token
  """
  accessToken: JWT!

  """
  JWT refresh token
  """
  refreshToken: JWT!
  user: User!
}

type BaseDonation {
  amount: Int!
  createdAt: DateTime!
  donorId: Int!
  id: Int!
  mpPreferenceId: String!
  projectId: Int!
}

type BaseSubscription {
  amount: Int!
  billingDayOfMonth: Int!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  donorId: Int!
  frequency: Int!
  frequencyInterval: FrequencyInterval!
  id: ID!
  mpSubscriptionId: String!
  projectId: Int!
  status: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input ContactDto {
  company: String!
  email: String!
  message: String!
  name: String!
  phone: String!
}

input CreateDonationInput {
  amount: Int!
  mpPreferenceId: String!
  projectId: Int!
}

input CreateDonorInput {
  cardStart: String
  email: String
  identification: String
  identificationType: String
  paymentMethod: String
}

input CreateEventInput {
  date: DateTime!
  description: String
  location: String
  monetaryGoal: Int
  name: String!
  organizationId: Int!
  projectId: Int!
  volunteersGoal: Int
}

input CreateOrganizationInput {
  address: String
  description: String!
  email: String
  facebookAccount: String
  field: String!
  instagramAccount: String
  name: String!
  twitterAccount: String
  web: String
}

input CreateProjectInput {
  acceptsVolunteers: Boolean!
  coverPhoto: String
  description: String!
  endDate: DateTime
  field: String!
  location: String

  """
  This is a private key, don't share with anyone else than us. We will encrypt it to store it.
  """
  mpAccessToken: String

  """
  If true, donations will be credited to your account immediately, but there is a 5% commission, versus 4% to receive the donation in 21 days.
  """
  mpInstantCheckout: Boolean

  """
  This is a public key to configure in the Website, it's harmless.
  """
  mpPublicKey: String
  name: String!
  organizationId: Int!
  photoGallery: [String!]
  startDate: DateTime
  video: String
}

input CreateSubscriptionInput {
  amount: Int!
  billingDayOfMonth: Int!
  frequency: Int!
  frequencyInterval: FrequencyInterval!
  mpSubscriptionId: String!
  projectId: Int!
  status: String!
}

input CreateUserInput {
  email: String!
  name: String!
  organizationId: Int
  password: String!
  phone: String
  role: Role!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Donation {
  amount: Int!
  createdAt: DateTime!
  donor: Donor!
  donorId: Int!
  id: Int!
  mpPreferenceId: String!
  project: Project!
  projectId: Int!
}

type Donor {
  cardStart: String

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  email: String
  id: ID!
  identification: String
  identificationType: String
  paymentMethod: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

input EmailVolunteers {
  body: String!
  projectId: Int!
  subject: String!
}

type Event {
  date: DateTime
  description: String
  id: Int!
  location: String
  monetaryGoal: Int
  name: String!
  organizationId: Int!
  projectId: Int!
  volunteersGoal: Int
}

enum FrequencyInterval {
  MONTHLY
  YEARLY
}

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  assignUserToProject(projectId: Int!, userId: Int!): ProjectUser!
  changePassword(data: ChangePasswordInput!): User!
  createDonation(createDonationInput: CreateDonationInput!, createDonorInput: CreateDonorInput!): BaseDonation!
  createDonor(createDonorInput: CreateDonorInput!): Donor!
  createEvent(createEventInput: CreateEventInput!): Event!
  createOrganization(createOrganizationInput: CreateOrganizationInput!): Organization!
  createProject(createProjectInput: CreateProjectInput!): Project!
  createSubscription(
    createDonorInput: CreateDonorInput!
    createSubscriptionInput: CreateSubscriptionInput!
  ): BaseSubscription!
  createUser(data: CreateUserInput!): User!
  emailVolunteers(emailVolunteersInput: EmailVolunteers!): Boolean!
  loadProjectHours(hours: Int!, projectId: Int!, userId: Int!): ProjectUser!
  login(data: LoginInput!): Auth!
  postContactForm(contactInput: ContactDto!): Boolean!
  refreshToken(token: JWT!): Token!
  removeDonor(id: Int!): Donor!
  removeEvent(eventId: Int!): Event!
  removeOrganization(organizationId: Int!): Organization!
  removeProject(id: Int!): Project!
  removeSubscription(id: Int!): Subscription!
  removeUser(id: Int!): User!
  subscribeToNewsletter(email: String!): Boolean!
  updateDonor(updateDonorInput: UpdateDonorInput!): Donor!
  updateEvent(updateEventInput: UpdateEventInput!): Event!
  updateOrganization(updateOrganizationInput: UpdateOrganizationInput!): Organization!
  updateProject(updateProjectInput: UpdateProjectInput!): Project!
  updateSubscription(updateSubscriptionInput: UpdateSubscriptionInput!): Subscription!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

type Organization {
  address: String
  description: String!
  facebookAccount: String
  field: String!
  id: Int!
  instagramAccount: String
  name: String!
  twitterAccount: String
  web: String
}

type PopulatedProjectUser {
  createdAt: DateTime!
  hours: Int
  project: Project!
  updatedAt: DateTime!
  user: User!
}

type Project {
  acceptsVolunteers: Boolean!
  coverPhoto: String

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  description: String!
  endDate: DateTime
  field: String!
  id: ID!
  location: String
  mpAccessToken: String
  mpEnabled: Boolean!
  mpInstantCheckout: Boolean
  mpPublicKey: String
  name: String!
  organization: Organization
  organizationId: Int!
  photoGallery: [String!]
  startDate: DateTime

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
  video: String
}

type ProjectUser {
  createdAt: DateTime!
  hours: Int!
  projectId: Int!
  updatedAt: DateTime!
  user: User
  userId: Int!
}

type ProjectUserPagination {
  total: Int!
  volunteers: [ProjectUser!]
}

type ProjectsPagination {
  projects: [Project!]!
  total: Int!
}

type Query {
  donation(id: Int!): Donation!
  donations(projectId: Int!): [Donation!]!
  donor(id: Int!): Donor
  event(eventId: Int!): Event!
  events: [Event!]!
  eventsByOrganization(organizationId: Int!): [Event!]!
  eventsByProject(projectId: Int!): [Event!]!
  me: User!
  organization(organizationId: Int!): Organization!
  organizationProjects(
    filter: String = ""
    itemsPerPage: Int! = 5
    organizationId: Int!
    page: Int! = 1
  ): ProjectsPagination!
  organizations(filter: String, itemsPerPage: Int! = 5, page: Int! = 1): [Organization!]!
  project(id: Int!): Project
  projectUsers(projectId: Int!): PopulatedProjectUser!
  projects(filter: String = "", itemsPerPage: Int! = 5, page: Int! = 1): ProjectsPagination!
  subscription(id: Int!): Subscription!
  subscriptions: [Subscription!]!
  user(id: Int!): User!
  users: [User!]!
  usersByOrganizationId(organizationId: Int!): [User!]!
  volunteersByProjectId(
    filter: String = ""
    itemsPerPage: Int! = 5
    page: Int! = 1
    projectId: Int!
  ): ProjectUserPagination!
}

enum Role {
  ORGADMIN
  SYSADMIN
  USER
}

type Subscription {
  amount: Int!
  billingDayOfMonth: Int!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  donor: Donor!
  donorId: Int!
  frequency: Int!
  frequencyInterval: FrequencyInterval!
  id: ID!
  mpSubscriptionId: String!
  project: Project!
  projectId: Int!
  status: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

type Token {
  """
  JWT access token
  """
  accessToken: JWT!

  """
  JWT refresh token
  """
  refreshToken: JWT!
}

input UpdateDonorInput {
  cardStart: String
  email: String
  id: Int!
  identification: String
  identificationType: String
  paymentMethod: String
}

input UpdateEventInput {
  date: DateTime
  description: String
  id: Int!
  location: String
  monetaryGoal: Int
  name: String
  organizationId: Int
  projectId: Int
  volunteersGoal: Int
}

input UpdateOrganizationInput {
  address: String
  description: String
  email: String
  facebookAccount: String
  field: String
  id: Int!
  instagramAccount: String
  name: String
  twitterAccount: String
  web: String
}

input UpdateProjectInput {
  acceptsVolunteers: Boolean
  coverPhoto: String
  description: String
  endDate: DateTime
  field: String
  id: Int!
  location: String

  """
  This is a private key, don't share with anyone else than us. We will encrypt it to store it.
  """
  mpAccessToken: String!

  """
  If true, donations will be credited to your account immediately, but there is a 5% commission, versus 4% to receive the donation in 21 days.
  """
  mpInstantCheckout: Boolean!

  """
  This is a public key to configure in the Website, it's harmless.
  """
  mpPublicKey: String!
  name: String
  organizationId: Int
  photoGallery: [String!]
  startDate: DateTime
  video: String
}

input UpdateSubscriptionInput {
  amount: Int
  billingDayOfMonth: Int
  frequency: Int
  frequencyInterval: FrequencyInterval
  id: Int!
  mpSubscriptionId: String
  projectId: Int
  status: String
}

input UpdateUserInput {
  email: String
  id: Int!
  name: String
  organizationId: Int
  password: String
  phone: String
  role: Role
}

type User {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String!
  organizationId: Int
  phone: String
  role: Role!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}
