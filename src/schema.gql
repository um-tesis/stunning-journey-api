# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
  user: User!
}

type BaseDonation {
  amount: Int!
  createdAt: DateTime!
  donorId: Int!
  id: Int!
  projectId: Int!
  status: String!
}

type BaseSubscription {
  amount: Int!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  frequency: Int!
  frequencyInterval: FrequencyInterval!
  id: ID!
  mpSubscriptionId: String!
  payerEmail: String
  projectId: Int!
  status: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type Billing {
  amount: Int!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  endsAt: DateTime!
  id: ID!
  paidAt: DateTime
  paidBy: Int
  paidByUser: User
  projectId: Int!
  status: BillingStatus!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

enum BillingStatus {
  PAID
  PENDING
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input ContactDto {
  company: String!
  email: String!
  message: String!
  name: String!
  phone: String!
}

input CreateDonationInput {
  amount: Int!
  paymentId: String!
  projectId: Int!
  status: String!
}

input CreateDonorInput {
  cardStart: String
  email: String
  firstName: String
  identification: String
  identificationType: String
  lastName: String
  paymentMethod: String
  phone: String
  userId: Int
}

input CreateEventInput {
  date: DateTime!
  description: String
  location: String
  monetaryGoal: Int
  name: String!
  organizationId: Int!
  projectId: Int!
  volunteersGoal: Int
}

input CreateOrganizationInput {
  address: String
  description: String!
  email: String
  facebookAccount: String
  field: String!
  instagramAccount: String
  name: String!
  twitterAccount: String
  web: String
}

input CreatePreapprovalInput {
  amount: Int!
  payerEmail: String!
  projectSlug: String!
}

input CreatePreferenceInput {
  amount: Int!
  projectSlug: String!
}

input CreateProjectInput {
  acceptsVolunteers: Boolean!
  coverPhoto: String
  description: String!
  field: String!
  location: String

  """
  This is a private key, don't share with anyone else than us. We will encrypt it to store it.
  """
  mpAccessToken: String
  mpApplicationId: String

  """
  If true, donations will be credited to your account immediately, but there is a 5% commission, versus 4% to receive the donation in 21 days.
  """
  mpInstantCheckout: Boolean

  """This is a public key to configure in the Website, it's harmless."""
  mpPublicKey: String
  name: String!
  organizationId: Int!
  photoGallery: [String!]
  startDate: DateTime
  video: String
}

input CreateSubscriptionInput {
  amount: Int!
  frequency: Int!
  frequencyInterval: FrequencyInterval!
  mpSubscriptionId: String!
  payerEmail: String
  projectId: Int!
  status: String!
}

input CreateUserInput {
  email: String!
  name: String!
  organizationId: Int
  password: String!
  phone: String
  role: Role!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Donation {
  amount: Int!
  createdAt: DateTime!
  donor: Donor!
  donorId: Int!
  id: Int!
  project: Project!
  projectId: Int!
  status: String!
}

type DonationPagination {
  donations: [Donation!]!
  total: Int!
}

type Donor {
  cardStart: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  email: String
  id: ID!
  identification: String
  identificationType: String
  paymentMethod: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type DonorPagination {
  donors: [Donor!]!
  total: Int!
}

input EmailVolunteers {
  body: String!
  projectId: Int!
  subject: String!
}

type Event {
  date: DateTime
  description: String
  id: Int!
  location: String
  monetaryGoal: Int
  name: String!
  organizationId: Int!
  projectId: Int!
  volunteersGoal: Int
}

enum FrequencyInterval {
  MONTHLY
  YEARLY
}

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  assignUserToProject(projectId: Int!, userId: Int!): ProjectUser!
  changePassword(data: ChangePasswordInput!): User!
  createDonation(createDonationInput: CreateDonationInput!, createDonorInput: CreateDonorInput!): BaseDonation!
  createDonor(createDonorInput: CreateDonorInput!): Donor!
  createEvent(createEventInput: CreateEventInput!): Event!
  createOrganization(createOrganizationInput: CreateOrganizationInput!): Organization!
  createPreapproval(createPreapprovalInput: CreatePreapprovalInput!): Preapproval!
  createPreference(createPreferenceInput: CreatePreferenceInput!): Preference!
  createProject(createProjectInput: CreateProjectInput!): Project!
  createSubscription(createSubscriptionInput: CreateSubscriptionInput!): BaseSubscription!
  createUser(data: CreateUserInput!): User!
  emailVolunteers(emailVolunteersInput: EmailVolunteers!): Boolean!
  loadProjectHours(hours: Int!, projectId: Int!, userId: Int!): ProjectUser!
  login(data: LoginInput!): Auth!
  postContactForm(contactInput: ContactDto!): Boolean!
  refreshToken(token: JWT!): Token!
  removeDonor(id: Int!): Donor!
  removeEvent(eventId: Int!): Event!
  removeOrganization(organizationId: Int!): Organization!
  removeProject(id: Int!): Project!
  removeSubscription(id: Int!): SubscriptionEntity!
  removeUser(id: Int!): User!
  subscribeToNewsletter(email: String!): Boolean!
  updateDonation(id: Int!, status: String!): Donation!
  updateDonor(updateDonorInput: UpdateDonorInput!): Donor!
  updateEvent(updateEventInput: UpdateEventInput!): Event!
  updateOrganization(updateOrganizationInput: UpdateOrganizationInput!): Organization!
  updateProject(updateProjectInput: UpdateProjectInput!): Project!
  updateSubscription(updateSubscriptionInput: UpdateSubscriptionInput!): SubscriptionEntity!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

type OrgAdminPagination {
  admins: [User!]!
  total: Int!
}

type Organization {
  address: String
  description: String!
  facebookAccount: String
  field: String!
  id: Int!
  instagramAccount: String
  name: String!
  twitterAccount: String
  web: String
}

type Payment {
  amount: Int!
  amountReceived: Float!
  card: PaymentCard!
  externalReference: String!
  id: String!
  payer: PaymentPayer!
  paymentMethodId: String!
  paymentTypeId: String!
  status: String!
}

type PaymentCard {
  cardHolderName: String
  expirationMonth: Int
  expirationYear: Int
  firstSixDigits: String
  lastFourDigits: String
}

type PaymentPayer {
  email: String!
  firstName: String
  identificationNumber: String!
  identificationType: String!
  lastName: String
  phone: String
}

type PopulatedProjectUser {
  createdAt: DateTime!
  hours: Int
  project: Project!
  updatedAt: DateTime!
  user: User!
}

type Preapproval {
  externalReference: String!
  id: String!
  initPoint: String!
  reason: String!
  status: String!
}

type Preference {
  externalReference: String!
  id: String!
  initPoint: String!
}

type Project {
  acceptsVolunteers: Boolean!
  activeSubscriptionsMoney: Int
  activeSubscriptionsNumber: Int
  coverPhoto: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  description: String!
  donatorsNumber: Int
  field: String!
  fixedEarningsWithSubscriptions: Int
  hoursVolunteered: Int
  id: ID!
  location: String
  moneyEarned: Int
  monthlyEarnedMoney: Int
  mpAccessToken: String
  mpApplicationId: String
  mpEnabled: Boolean!
  mpInstantCheckout: Boolean
  mpPublicKey: String
  name: String!
  organization: Organization!
  organizationId: Int!
  photoGallery: [String!]
  slug: String!
  startDate: DateTime

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  video: String
  volunteersNumber: Int
}

type ProjectUser {
  createdAt: DateTime!
  hours: Int!
  projectId: Int!
  updatedAt: DateTime!
  user: User
  userId: Int!
}

type ProjectUserPagination {
  total: Int!
  volunteers: [ProjectUser!]
}

type ProjectsPagination {
  projects: [Project!]!
  total: Int!
}

type Query {
  adminsByOrganizationId(filter: String = "", itemsPerPage: Int, page: Int): OrgAdminPagination!
  billing(id: Int!): Billing!
  billingsByProjectId(projectId: Int!): [Billing!]!
  donation(id: Int!): Donation!
  donationsByOrganization(filter: String = "", itemsPerPage: Int, organizationId: Int!, page: Int): DonationPagination!
  donationsByProject(filter: String = "", itemsPerPage: Int, page: Int, projectId: Int!): DonationPagination!
  donor(id: Int!): Donor
  donorsByProject(filter: String = "", itemsPerPage: Int, page: Int, projectId: Int!): DonorPagination!
  event(eventId: Int!): Event!
  events: [Event!]!
  eventsByOrganization(organizationId: Int!): [Event!]!
  eventsByProject(projectId: Int!): [Event!]!
  me: User!
  organization(organizationId: Int!): Organization!
  organizationProjects(filter: String = "", itemsPerPage: Int, organizationId: Int!, page: Int): ProjectsPagination!
  organizations(filter: String, itemsPerPage: Int, page: Int): [Organization!]!
  paymentInfo(paymentId: Int!, projectSlug: String!): Payment!
  project(id: Int!): Project
  projectBySlug(slug: String!): Project
  projectUsers(projectId: Int!): PopulatedProjectUser!
  projects(filter: String = "", itemsPerPage: Int, page: Int): ProjectsPagination!
  subscription(id: Int!): SubscriptionEntity!
  subscriptionByMpId(mpSubscriptionId: String!): SubscriptionEntity
  subscriptions: [SubscriptionEntity!]!
  subscriptionsByOrganization(filter: String = "", itemsPerPage: Int, organizationId: Int!, page: Int): SubscriptionPagination!
  subscriptionsByProject(filter: String = "", itemsPerPage: Int, page: Int, projectId: Int!): SubscriptionPagination!
  user(id: Int!): User!
  users: [User!]!
  usersByOrganizationId(organizationId: Int!): [User!]!
  volunteersByProjectId(filter: String = "", itemsPerPage: Int, page: Int, projectId: Int!): ProjectUserPagination!
}

enum Role {
  ORGADMIN
  SYSADMIN
  USER
}

type SubscriptionEntity {
  amount: Int!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  frequency: Int!
  frequencyInterval: FrequencyInterval!
  id: ID!
  mpSubscriptionId: String!
  payerEmail: String
  project: Project!
  projectId: Int!
  status: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type SubscriptionPagination {
  subscriptions: [SubscriptionEntity!]!
  total: Int!
}

type Token {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
}

input UpdateDonorInput {
  cardStart: String
  email: String
  firstName: String
  id: Int!
  identification: String
  identificationType: String
  lastName: String
  paymentMethod: String
  phone: String
  userId: Int
}

input UpdateEventInput {
  date: DateTime
  description: String
  id: Int!
  location: String
  monetaryGoal: Int
  name: String
  organizationId: Int
  projectId: Int
  volunteersGoal: Int
}

input UpdateOrganizationInput {
  address: String
  description: String
  email: String
  facebookAccount: String
  field: String
  id: Int!
  instagramAccount: String
  name: String
  twitterAccount: String
  web: String
}

input UpdateProjectInput {
  acceptsVolunteers: Boolean
  coverPhoto: String
  description: String
  field: String
  id: Int!
  location: String

  """
  This is a private key, don't share with anyone else than us. We will encrypt it to store it.
  """
  mpAccessToken: String
  mpApplicationId: String

  """
  If true, donations will be credited to your account immediately, but there is a 5% commission, versus 4% to receive the donation in 21 days.
  """
  mpInstantCheckout: Boolean

  """This is a public key to configure in the Website, it's harmless."""
  mpPublicKey: String
  name: String
  organizationId: Int
  photoGallery: [String!]
  startDate: DateTime
  video: String
}

input UpdateSubscriptionInput {
  amount: Int
  frequency: Int
  frequencyInterval: FrequencyInterval
  id: Int
  mpSubscriptionId: String
  payerEmail: String
  projectId: Int
  status: String!
}

input UpdateUserInput {
  email: String
  id: Int!
  name: String
  organizationId: Int
  password: String
  phone: String
  role: Role
}

type User {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String!
  organizationId: Int
  phone: String
  role: Role!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}