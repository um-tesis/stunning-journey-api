# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateEventInput {
  date: DateTime!
  description: String
  location: String
  monetaryGoal: Int
  name: String!
  organizationId: Int!
  projectId: Int!
  volunteersGoal: Int
}

input CreateOrganizationInput {
  address: String
  description: String!
  email: String
  facebookAccount: String
  field: String!
  instagramAccount: String
  name: String!
  twitterAccount: String
  web: String
}

input CreateProjectInput {
  description: String!
  endDate: DateTime
  field: String!
  name: String!
  organizationId: Int!
  startDate: DateTime
}

input CreateUserInput {
  email: String!
  name: String!
  organizationId: Int
  password: String!
  phone: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Event {
  date: DateTime
  description: String
  id: Int!
  location: String
  monetaryGoal: Int
  name: String!
  organizationId: Int!
  projectId: Int!
  volunteersGoal: Int
}

input LogInModelIn {
  email: String!
  password: String!
}

type LogInModelOut {
  token: String!
  user: User!
}

type Mutation {
  assignUserToProject(project_id: Int!, user_id: Int!): ProjectUser!
  createEvent(createEventInput: CreateEventInput!): Event!
  createOrganization(createOrganizationInput: CreateOrganizationInput!): Organization!
  createProject(createProjectInput: CreateProjectInput!): Project!
  createUser(createUserInput: CreateUserInput!): User!
  removeEvent(eventId: Int!): Event!
  removeOrganization(organizationId: Int!): Organization!
  removeProject(id: Int!): Project!
  removeUser(id: Int!): User!
  updateEvent(updateEventInput: UpdateEventInput!): Event!
  updateOrganization(updateOrganizationInput: UpdateOrganizationInput!): Organization!
  updateProject(updateProjectInput: UpdateProjectInput!): Project!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

type Organization {
  address: String
  description: String!
  facebookAccount: String
  field: String!
  id: Int!
  instagramAccount: String
  name: String!
  twitterAccount: String
  web: String
}

type PopulatedProjectUser {
  project: Project!
  users: [User!]!
}

type Project {
  description: String!
  endDate: DateTime
  field: String!
  id: Int!
  monetaryGoal: Int
  name: String!
  organizationId: Int!
  startDate: DateTime
}

enum ProjectRole {
  MEMBER
  OWNER
  VOLUNTEER
}

type ProjectUser {
  projectId: Int!
  role: ProjectRole
  userId: Int!
}

type ProjectsPagination {
  projects: [Project!]!
  total: Int!
}

type Query {
  event(eventId: Int!): Event!
  events: [Event!]!
  eventsByOrganization(organizationId: Int!): [Event!]!
  eventsByProject(projectId: Int!): [Event!]!
  login(logInModelIn: LogInModelIn!): LogInModelOut!
  organization(organizationId: Int!): Organization!
  organizationProjects(organizationId: Int!): [Project!]!
  organizations(filter: String, itemsPerPage: Int! = 5, page: Int! = 1): [Organization!]!
  project(id: Int!): Project!
  projectUsers(projectId: Int!): PopulatedProjectUser!
  projects(filter: String = "", itemsPerPage: Int! = 5, page: Int! = 1): ProjectsPagination!
  user(id: Int!): User!
  users: [User!]!
  usersByOrganizationId(organization_id: Int!): [User!]!
}

enum Role {
  ORGADMIN
  SYSADMIN
  USER
}

input UpdateEventInput {
  date: DateTime
  description: String
  id: Int!
  location: String
  monetaryGoal: Int
  name: String
  organizationId: Int
  projectId: Int
  volunteersGoal: Int
}

input UpdateOrganizationInput {
  address: String
  description: String
  email: String
  facebookAccount: String
  field: String
  id: Int!
  instagramAccount: String
  name: String
  twitterAccount: String
  web: String
}

input UpdateProjectInput {
  description: String
  endDate: DateTime
  field: String
  id: Int!
  monetaryGoal: Int
  name: String
  organizationId: Int
  startDate: DateTime
}

input UpdateUserInput {
  email: String
  id: Int!
  name: String
  organizationId: Int
  password: String
  phone: String
}

type User {
  email: String!
  id: Int!
  name: String!
  organizationId: Int
  phone: String
  role: Role!
}